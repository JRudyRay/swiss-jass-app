{
  "version": 3,
  "sources": ["../src/engine/schieber.ts", "../scripts/simulate.ts"],
  "sourcesContent": ["// Minimal Schieber engine for local play (client-side)\r\n// Implements deck, dealing, trump rules, trick resolution and scoring.\r\n// Enhanced with authentic Swiss Jass features and terminology\r\n\r\nexport type Suit = 'eicheln' | 'schellen' | 'rosen' | 'schilten';\r\nexport type Rank = '6'|'7'|'8'|'9'|'10'|'U'|'O'|'K'|'A';\r\nexport type TrumpContract = 'eicheln' | 'schellen' | 'rosen' | 'schilten' | 'oben-abe' | 'unden-ufe';\r\n\r\nexport type Card = {\r\n  id: string;\r\n  suit: Suit;\r\n  rank: Rank;\r\n};\r\n\r\nexport type Player = { id: number; name: string; team: number; hand: Card[]; tricks: Card[]; points?: number; weis?: WeisDeclaration[] };\r\n\r\nexport type WeisType = 'sequence3' | 'sequence4' | 'sequence5plus' | 'four_jacks' | 'four_nines' | 'four_aces' | 'four_kings' | 'four_queens' | 'four_tens' | 'stoeck';\r\n\r\nexport type WeisDeclaration = {\r\n  type: WeisType;\r\n  cards: Card[];\r\n  points: number;\r\n  description: string;\r\n};\r\n\r\nexport type State = {\r\n  phase: 'dealing'|'trump_selection'|'playing'|'resolving'|'scoring'|'finished';\r\n  trump?: TrumpContract | null;\r\n  currentPlayer: number; // 0..3\r\n  dealer: number; // 0..3, rotates after each hand\r\n  // currentTrick entries now include playerId so UI can show origin\r\n  currentTrick: (Card & { playerId: number })[]; // up to 4\r\n  // lastTrick holds the last completed trick (used by UI to display before clearing)\r\n  lastTrick?: (Card & { playerId: number })[];\r\n  trickLead?: Suit | null;\r\n  players: Player[];\r\n  scores: { team1: number; team2: number };\r\n  // when a trick of 4 cards has been played and UI should show it before resolving\r\n  pendingResolve?: boolean;\r\n  // Weis declarations for each player after trump is selected\r\n  weis?: Record<number, WeisDeclaration[]>; // playerId -> declarations\r\n  // Swiss Jass authentic features\r\n  trumpMultiplier?: number; // 1x, 2x (Schellen/Schilten), 3x (Oben-abe), 4x (Unden-ufe)\r\n  matchBonus?: number; // 100 for taking all 9 tricks\r\n};\r\n\r\nconst suits: Suit[] = ['eicheln','schellen','rosen','schilten'];\r\nconst ranks: Rank[] = ['6','7','8','9','10','U','O','K','A'];\r\n\r\n// Point values for non-trump\r\nconst basePoints: Record<Rank, number> = {\r\n  '6':0,'7':0,'8':0,'9':0,'10':10,'U':2,'O':3,'K':4,'A':11\r\n};\r\n\r\n// In trump, U (Unter) = 20, 9 = 14\r\nconst trumpOverride: Record<Rank, number> = {\r\n  'U':20,'9':14,'A':11,'10':10,'K':4,'O':3,'8':0,'7':0,'6':0\r\n};\r\n\r\n// Comparators: higher returns positive\r\nfunction rankValue(rank: Rank, isTrump: boolean): number {\r\n  if (isTrump) return trumpOverride[rank];\r\n  return basePoints[rank];\r\n}\r\n\r\n// For ordering cards (not points) we need rank order lists.\r\n// Swiss Jass trump order: U (Jack) highest, then 9, A, 10, K, O, 8, 7, 6 lowest\r\nconst trumpOrder: Rank[] = ['U','9','A','10','K','O','8','7','6'];\r\nconst normalOrder: Rank[] = ['A','10','K','O','U','9','8','7','6'];\r\n\r\n// Return index in an order array for comparisons. Lower index = stronger card.\r\nexport function rankOrderIndex(rank: Rank, contract: TrumpContract | null | undefined, isTrumpCard: boolean) {\r\n  // Special contracts without a suit-trump: 'oben-abe' and 'unden-ufe'\r\n  if (contract === 'unden-ufe') {\r\n    // In Unden-ufe the 6 is highest, then 7,8,9,U,O,K,10,A\r\n    const undenOrder: Rank[] = ['6','7','8','9','U','O','K','10','A'];\r\n    return undenOrder.indexOf(rank);\r\n  }\r\n  if (contract === 'oben-abe') {\r\n    // Oben-abe: Ace high ordering (normalOrder)\r\n    return normalOrder.indexOf(rank);\r\n  }\r\n\r\n  // Regular contract: if this card is a suit-trump, use trumpOrder, otherwise normalOrder\r\n  if (isTrumpCard) return trumpOrder.indexOf(rank);\r\n  return normalOrder.indexOf(rank);\r\n}\r\n\r\nfunction makeId(suit: Suit, rank: Rank) { return `${suit}_${rank}_${Math.random().toString(36).slice(2,9)}`; }\r\n\r\nexport function createDeck(): Card[] {\r\n  const deck: Card[] = [];\r\n  for (const s of suits) for (const r of ranks) deck.push({ id: makeId(s,r), suit: s, rank: r });\r\n  return deck;\r\n}\r\n\r\nexport function shuffle<T>(arr: T[]) {\r\n  for (let i = arr.length -1; i>0; i--) {\r\n    const j = Math.floor(Math.random()*(i+1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n}\r\n\r\nexport function deal(): Player[] {\r\n  const deck = createDeck();\r\n  shuffle(deck);\r\n  // Use Swiss-like names and mark bots\r\n  const names = ['You', 'Anna (bot)', 'Reto (bot)', 'Fritz (bot)'];\r\n  const players: Player[] = [0,1,2,3].map(i => ({ id: i, name: names[i] || `Player ${i+1}`, team: i%2===0?1:2, hand: [], tricks: [], points: 0, weis: [] }));\r\n  // 36 cards, 9 each\r\n  for (let i=0;i<9;i++) {\r\n    for (let p=0;p<4;p++) {\r\n      const card = deck.pop()!;\r\n      players[p].hand.push(card);\r\n    }\r\n  }\r\n  return players;\r\n}\r\n\r\nexport function startGameLocal(previousDealer?: number): State {\r\n  const players = deal();\r\n  // Dealer rotates clockwise each hand (0->1->2->3->0)\r\n  const dealer = previousDealer !== undefined ? (previousDealer + 1) % 4 : 0;\r\n  // Trump selector is the player to the left of dealer (dealer + 1)\r\n  const trumpSelector = (dealer + 1) % 4;\r\n  const st: State = { \r\n    phase: 'trump_selection', \r\n    trump: null, \r\n    currentPlayer: trumpSelector, \r\n    dealer,\r\n    currentTrick: [], \r\n    trickLead: null, \r\n    players, \r\n    scores: { team1: 0, team2: 0 } \r\n  };\r\n  return st;\r\n}\r\n\r\n// Start a new hand with proper dealer rotation\r\nexport function startNewHand(previousState: State): State {\r\n  const players = deal();\r\n  // Dealer rotates clockwise each hand\r\n  const dealer = (previousState.dealer + 1) % 4;\r\n  // Trump selector is the player to the left of dealer\r\n  const trumpSelector = (dealer + 1) % 4;\r\n  const st: State = { \r\n    phase: 'trump_selection', \r\n    trump: null, \r\n    currentPlayer: trumpSelector, \r\n    dealer,\r\n    currentTrick: [], \r\n    trickLead: null, \r\n    players, \r\n    scores: previousState.scores // Keep cumulative scores\r\n  };\r\n  return st;\r\n}\r\n\r\n// Choose a random trump suit\r\nexport function chooseRandomTrump(): Suit {\r\n  return suits[Math.floor(Math.random()*suits.length)];\r\n}\r\n\r\n// Smart bot trump selection based on hand analysis\r\nexport function chooseBotTrump(state: State, playerId: number): TrumpContract | 'schieben' {\r\n  const player = state.players.find(p => p.id === playerId);\r\n  if (!player) return chooseRandomTrump();\r\n  \r\n  const hand = player.hand;\r\n  \r\n  // Count cards by suit\r\n  const suitCounts: Record<Suit, number> = {\r\n    'eicheln': 0,\r\n    'schellen': 0, \r\n    'rosen': 0,\r\n    'schilten': 0\r\n  };\r\n  \r\n  const suitStrength: Record<Suit, number> = {\r\n    'eicheln': 0,\r\n    'schellen': 0,\r\n    'rosen': 0, \r\n    'schilten': 0\r\n  };\r\n  \r\n  // Analyze hand strength by suit\r\n  hand.forEach(card => {\r\n    suitCounts[card.suit]++;\r\n    \r\n    // Add strength points for high cards\r\n    switch(card.rank) {\r\n      case 'A': suitStrength[card.suit] += 4; break;\r\n      case 'K': suitStrength[card.suit] += 3; break;\r\n      case 'O': suitStrength[card.suit] += 3; break;\r\n      case 'U': suitStrength[card.suit] += 5; break; // Jack is strong in trump\r\n      case '10': suitStrength[card.suit] += 2; break;\r\n      case '9': suitStrength[card.suit] += 1; break; // 9 is strong in trump\r\n    }\r\n  });\r\n  \r\n  // Find best suit (combination of count and strength)\r\n  let bestSuit: Suit = 'eicheln';\r\n  let bestScore = 0;\r\n  \r\n  (Object.keys(suitCounts) as Suit[]).forEach(suit => {\r\n    const score = suitCounts[suit] * 2 + suitStrength[suit];\r\n    if (score > bestScore) {\r\n      bestScore = score;\r\n      bestSuit = suit;\r\n    }\r\n  });\r\n  \r\n  // Sometimes choose special contracts with good hands\r\n  const totalHighCards = hand.filter(c => ['A', 'K', 'O'].includes(c.rank)).length;\r\n  const random = Math.random();\r\n  \r\n  // 10% chance to choose oben-abe with many high cards\r\n  if (totalHighCards >= 5 && random < 0.1) {\r\n    return 'oben-abe';\r\n  }\r\n\r\n  // 5% chance to choose unden-ufe with many low cards\r\n  const totalLowCards = hand.filter(c => ['6', '7', '8'].includes(c.rank)).length;\r\n  if (totalLowCards >= 5 && random < 0.05) {\r\n    return 'unden-ufe';\r\n  }\r\n\r\n  // If hand is weak overall, sometimes choose to pass (schieben) to partner\r\n  // Reduce pass probability if hand contains several trumps or high cards (don't pass strong hands)\r\n  const handStrength = Object.values(suitStrength).reduce((a,b)=>a+b,0) + totalHighCards*2 - totalLowCards;\r\n  const trumpCount = ['eicheln','schellen','rosen','schilten'].reduce((s, su) => s + player.hand.filter(c => c.suit === su).length, 0);\r\n  let passProb = 0.2;\r\n  if (trumpCount >= 4 || bestScore >= 10) passProb = 0.05; // strong hand -> rarely pass\r\n  if (totalLowCards >= 6) passProb = 0.35; // very low hand -> more likely to pass\r\n  if (handStrength < 6 && Math.random() < passProb) {\r\n    return 'schieben';\r\n  }\r\n\r\n  return bestSuit;\r\n}\r\n\r\n// Set trump and detect all Weis\r\nexport function setTrumpAndDetectWeis(state: State, trump: TrumpContract): State {\r\n  const st = JSON.parse(JSON.stringify(state)) as State;\r\n  // If trump passed as 'schieben' from bots, this function expects a real TrumpContract.\r\n  // The caller should handle 'schieben' by passing the decision to the partner; to be safe,\r\n  // if the value is not a suit or special contract, ignore and return state unchanged.\r\n  if ((trump as any) === 'schieben') return st;\r\n  st.trump = trump;\r\n  \r\n  // Set multiplier based on trump contract (authentic Swiss Jass rules)\r\n  if (trump === 'schellen' || trump === 'schilten') {\r\n    st.trumpMultiplier = 2; // Double for \"Sch-\" suits (black suits)\r\n  } else if (trump === 'oben-abe') {\r\n    st.trumpMultiplier = 3; // Triple for \"tops-down\"\r\n  } else if (trump === 'unden-ufe') {\r\n    st.trumpMultiplier = 4; // Quadruple for \"bottoms-up\"\r\n  } else {\r\n    st.trumpMultiplier = 1; // Normal for Eicheln/Rosen\r\n  }\r\n  \r\n  // Detect Weis for all players now that trump is known\r\n  st.weis = {};\r\n  for (const player of st.players) {\r\n    // For no-trump contracts, pass null to detectWeis\r\n    const trumpSuit = (trump === 'oben-abe' || trump === 'unden-ufe') ? null : trump;\r\n    player.weis = detectWeis(player.hand, trumpSuit);\r\n    st.weis[player.id] = player.weis;\r\n  }\r\n  \r\n  st.phase = 'playing';\r\n  return st;\r\n}\r\n\r\nexport function getLegalCardsForPlayer(state: State, playerId: number): Card[] {\r\n  const player = state.players.find(p=>p.id===playerId)!;\r\n  if (!player) return [];\r\n  \r\n  // First card of trick - any card allowed\r\n  if (state.currentTrick.length===0) return player.hand.slice();\r\n  \r\n  const leadSuit = state.trickLead!;\r\n  const trumpContract = state.trump as TrumpContract | null | undefined;\r\n\r\n  // Helper: determine current best card in trick so far\r\n  const currentBestIdx = state.currentTrick.length > 0 ? winnerOfTrick(state.currentTrick as any, trumpContract as any, leadSuit) : 0;\r\n  const currentBestCard = state.currentTrick[currentBestIdx];\r\n\r\n  // If player has cards of the lead suit, they must follow suit.\r\n  const sameSuit = player.hand.filter(c => c.suit === leadSuit);\r\n  if (sameSuit.length > 0) {\r\n    // If any of these can beat the current best card, only those are allowed (Stichzwang)\r\n    const beating = sameSuit.filter(c => compareCards(c, currentBestCard, trumpContract, leadSuit) < 0);\r\n    return beating.length > 0 ? beating : sameSuit;\r\n  }\r\n\r\n  // No lead suit: if there is a suit-trump, player must play a trump if they have any\r\n  const suitTrump: Suit | null = (trumpContract && (suits as any).includes(trumpContract)) ? trumpContract as Suit : null;\r\n  if (suitTrump) {\r\n    const trumpCards = player.hand.filter(c => c.suit === suitTrump);\r\n    if (trumpCards.length > 0) {\r\n      // If any trump can beat currentBestCard, only those are allowed\r\n      const beatingTrumps = trumpCards.filter(c => compareCards(c, currentBestCard, trumpContract, leadSuit) < 0);\r\n      return beatingTrumps.length > 0 ? beatingTrumps : trumpCards;\r\n    }\r\n  }\r\n\r\n  // Otherwise any card allowed\r\n  return player.hand.slice();\r\n}\r\n\r\n// compare two cards with knowledge of trump and lead suit\r\nexport function compareCards(a: Card, b: Card, trumpContract?: TrumpContract | null, leadSuit?: Suit | null) {\r\n  const suitTrump: Suit | null = (trumpContract && (suits as any).includes(trumpContract)) ? trumpContract as Suit : null;\r\n  const aIsTrump = suitTrump ? a.suit === suitTrump : false;\r\n  const bIsTrump = suitTrump ? b.suit === suitTrump : false;\r\n  if (aIsTrump && !bIsTrump) return 1;\r\n  if (!aIsTrump && bIsTrump) return -1;\r\n  // same trump status\r\n  // if both share lead suit, use ordering according to contract\r\n  return rankOrderIndex(a.rank, trumpContract, aIsTrump) - rankOrderIndex(b.rank, trumpContract, bIsTrump);\r\n}\r\n\r\nfunction winnerOfTrick(cards: Card[], trump?: string | null, leadSuit?: Suit | null) {\r\n  let winnerIndex = 0;\r\n  for (let i=1;i<cards.length;i++) {\r\n    const cmp = compareCards(cards[i], cards[winnerIndex], trump as TrumpContract | null | undefined, leadSuit);\r\n    if (cmp < 0) {\r\n      // lower index means higher priority? adjust: our compare returns index difference, so negative means cards[i] higher? Wait\r\n    }\r\n  }\r\n  // simpler: find highest by using sort key\r\n  let bestIdx = 0;\r\n  let best = cards[0];\r\n  for (let i=1;i<cards.length;i++) {\r\n  const a = cards[i];\r\n  const b = best;\r\n  const aTrump = (trump as TrumpContract | null | undefined) ? a.suit === (trump as any) : false;\r\n  const bTrump = (trump as TrumpContract | null | undefined) ? b.suit === (trump as any) : false;\r\n    if (aTrump && !bTrump) { best = a; bestIdx = i; continue; }\r\n    if (!aTrump && bTrump) continue;\r\n    // both same trump status; if both are lead suit prefer lead suit\r\n    if (leadSuit) {\r\n      const aLead = a.suit === leadSuit;\r\n      const bLead = b.suit === leadSuit;\r\n      if (aLead && !bLead) { best = a; bestIdx = i; continue; }\r\n      if (!aLead && bLead) continue;\r\n    }\r\n  const ai = rankOrderIndex(a.rank, trump as TrumpContract | null | undefined, aTrump);\r\n  const bi = rankOrderIndex(b.rank, trump as TrumpContract | null | undefined, bTrump);\r\n    if (ai < bi) { best = a; bestIdx = i; }\r\n  }\r\n  return bestIdx;\r\n}\r\n\r\n// Return the absolute player id who would win the current trick (without mutating state)\r\nexport function peekTrickWinner(state: State): number | null {\r\n  if (!state.currentTrick || state.currentTrick.length !== 4) return null;\r\n  const lead = state.trickLead!;\r\n  // winnerOfTrick returns the index (0..3) of the winning card in the trick array.\r\n  // Map that index to the absolute player id by reading the playerId stored on the card.\r\n  const winnerIdx = winnerOfTrick(state.currentTrick as any, state.trump || undefined, lead);\r\n  const winnerCard = state.currentTrick[winnerIdx];\r\n  return winnerCard.playerId;\r\n}\r\n\r\nexport function playCardLocal(state: State, playerId: number, cardId: string): State {\r\n  const st = JSON.parse(JSON.stringify(state)) as State; // naive clone\r\n  const player = st.players.find(p=>p.id===playerId)!;\r\n  const idx = player.hand.findIndex(c=>c.id===cardId);\r\n  if (idx === -1) return st; // illegal\r\n  const card = player.hand.splice(idx,1)[0];\r\n  if (st.currentTrick.length===0) st.trickLead = card.suit;\r\n  // include who played the card so UI can label it\r\n  st.currentTrick.push({ ...card, playerId });\r\n\r\n  // if trick complete\r\n  if (st.currentTrick.length===4) {\r\n  // Instead of resolving immediately, mark pendingResolve so UI can show the last card for a short pause\r\n  st.pendingResolve = true;\r\n  st.phase = 'resolving';\r\n  // do not clear currentTrick here\r\n  } else {\r\n    st.currentPlayer = (st.currentPlayer + 1) % 4;\r\n  }\r\n\r\n  // detect end of round (all hands empty)\r\n  if (st.players.every(p => p.hand.length === 0)) {\r\n    st.phase = 'finished';\r\n    \r\n    // Distribute team scores to individual players for rankings\r\n    const team1Players = st.players.filter(p => p.team === 1);\r\n    const team2Players = st.players.filter(p => p.team === 2);\r\n    const team1Score = st.scores.team1;\r\n    const team2Score = st.scores.team2;\r\n    \r\n    // Each player gets their team's total score (for individual rankings)\r\n    team1Players.forEach(p => p.points = team1Score);\r\n    team2Players.forEach(p => p.points = team2Score);\r\n  } else {\r\n    st.phase = 'playing';\r\n  }\r\n\r\n  return st;\r\n}\r\n\r\n// === WEIS (MELDS) DETECTION FUNCTIONS ===\r\n\r\n// Convert rank to numeric value for sequence checking\r\nfunction rankToNumber(rank: Rank): number {\r\n  const rankOrder = ['6', '7', '8', '9', '10', 'U', 'O', 'K', 'A'];\r\n  return rankOrder.indexOf(rank);\r\n}\r\n\r\n// Detect all possible Weis for a hand\r\nexport function detectWeis(hand: Card[], trump?: string | null): WeisDeclaration[] {\r\n  const weis: WeisDeclaration[] = [];\r\n  \r\n  // Group cards by suit for sequence detection\r\n  const bySuit: { [suit: string]: Card[] } = {};\r\n  for (const card of hand) {\r\n    if (!bySuit[card.suit]) bySuit[card.suit] = [];\r\n    bySuit[card.suit].push(card);\r\n  }\r\n  \r\n  // Sort each suit by rank\r\n  for (const suit in bySuit) {\r\n    bySuit[suit].sort((a, b) => rankToNumber(a.rank) - rankToNumber(b.rank));\r\n  }\r\n  \r\n  // Check for sequences in each suit\r\n  for (const suit in bySuit) {\r\n    const cards = bySuit[suit];\r\n    if (cards.length >= 3) {\r\n      // Find consecutive sequences\r\n      const sequences = findSequences(cards);\r\n      for (const seq of sequences) {\r\n        if (seq.length >= 5) {\r\n          weis.push({\r\n            type: 'sequence5plus',\r\n            cards: seq,\r\n            points: 100,\r\n            description: `Sequenz ${seq.length} (${seq[0].rank}-${seq[seq.length-1].rank} ${suit})`\r\n          });\r\n        } else if (seq.length === 4) {\r\n          weis.push({\r\n            type: 'sequence4',\r\n            cards: seq,\r\n            points: 50,\r\n            description: `Sequenz 4 (${seq[0].rank}-${seq[seq.length-1].rank} ${suit})`\r\n          });\r\n        } else if (seq.length === 3) {\r\n          weis.push({\r\n            type: 'sequence3',\r\n            cards: seq,\r\n            points: 20,\r\n            description: `Sequenz 3 (${seq[0].rank}-${seq[seq.length-1].rank} ${suit})`\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Group cards by rank for four-of-a-kind detection\r\n  const byRank: { [rank: string]: Card[] } = {};\r\n  for (const card of hand) {\r\n    if (!byRank[card.rank]) byRank[card.rank] = [];\r\n    byRank[card.rank].push(card);\r\n  }\r\n  \r\n  // Check for four of a kind\r\n  for (const rank in byRank) {\r\n    if (byRank[rank].length === 4) {\r\n      if (rank === 'U') {\r\n        weis.push({\r\n          type: 'four_jacks',\r\n          cards: byRank[rank],\r\n          points: 200,\r\n          description: 'Vier Buben'\r\n        });\r\n      } else if (rank === '9') {\r\n        weis.push({\r\n          type: 'four_nines',\r\n          cards: byRank[rank],\r\n          points: 150,\r\n          description: 'Vier Neuner'\r\n        });\r\n      } else if (rank === 'A') {\r\n        weis.push({\r\n          type: 'four_aces',\r\n          cards: byRank[rank],\r\n          points: 100,\r\n          description: 'Vier Asse'\r\n        });\r\n      } else if (rank === 'K') {\r\n        weis.push({\r\n          type: 'four_kings',\r\n          cards: byRank[rank],\r\n          points: 100,\r\n          description: 'Vier K\u00F6nige'\r\n        });\r\n      } else if (rank === 'O') {\r\n        weis.push({\r\n          type: 'four_queens',\r\n          cards: byRank[rank],\r\n          points: 100,\r\n          description: 'Vier Damen'\r\n        });\r\n      } else if (rank === '10') {\r\n        weis.push({\r\n          type: 'four_tens',\r\n          cards: byRank[rank],\r\n          points: 100,\r\n          description: 'Vier Zehner'\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Check for St\u00F6ck (King and Queen of trump)\r\n  if (trump && byRank['K'] && byRank['O']) {\r\n    const trumpKing = byRank['K'].find(c => c.suit === trump);\r\n    const trumpQueen = byRank['O'].find(c => c.suit === trump);\r\n    if (trumpKing && trumpQueen) {\r\n      weis.push({\r\n        type: 'stoeck',\r\n        cards: [trumpKing, trumpQueen],\r\n        points: 20,\r\n        description: `St\u00F6ck (${trump})`\r\n      });\r\n    }\r\n  }\r\n  \r\n  return weis;\r\n}\r\n\r\n// Find consecutive sequences in a sorted array of cards\r\nfunction findSequences(sortedCards: Card[]): Card[][] {\r\n  const sequences: Card[][] = [];\r\n  let currentSeq: Card[] = [sortedCards[0]];\r\n  \r\n  for (let i = 1; i < sortedCards.length; i++) {\r\n    const prev = rankToNumber(sortedCards[i-1].rank);\r\n    const curr = rankToNumber(sortedCards[i].rank);\r\n    \r\n    if (curr === prev + 1) {\r\n      // Consecutive\r\n      currentSeq.push(sortedCards[i]);\r\n    } else {\r\n      // End of sequence\r\n      if (currentSeq.length >= 3) {\r\n        sequences.push(currentSeq);\r\n      }\r\n      currentSeq = [sortedCards[i]];\r\n    }\r\n  }\r\n  \r\n  // Don't forget the last sequence\r\n  if (currentSeq.length >= 3) {\r\n    sequences.push(currentSeq);\r\n  }\r\n  \r\n  return sequences;\r\n}\r\n\r\n// Calculate Weis points for a team (only best Weis counts)\r\nexport function calculateTeamWeis(players: Player[]): { team1: number, team2: number, details: { [playerId: number]: WeisDeclaration[] } } {\r\n  const team1Players = players.filter(p => p.team === 1);\r\n  const team2Players = players.filter(p => p.team === 2);\r\n  \r\n  let team1BestWeis: WeisDeclaration | null = null;\r\n  let team2BestWeis: WeisDeclaration | null = null;\r\n  \r\n  const details: { [playerId: number]: WeisDeclaration[] } = {};\r\n  \r\n  // Find best Weis for each team\r\n  for (const player of team1Players) {\r\n    details[player.id] = player.weis || [];\r\n    for (const weis of player.weis || []) {\r\n      if (!team1BestWeis || isWeisBetter(weis, team1BestWeis)) {\r\n        team1BestWeis = weis;\r\n      }\r\n    }\r\n  }\r\n  \r\n  for (const player of team2Players) {\r\n    details[player.id] = player.weis || [];\r\n    for (const weis of player.weis || []) {\r\n      if (!team2BestWeis || isWeisBetter(weis, team2BestWeis)) {\r\n        team2BestWeis = weis;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Determine winning team and award all their Weis points\r\n  let team1Points = 0;\r\n  let team2Points = 0;\r\n  \r\n  if (team1BestWeis && team2BestWeis) {\r\n    if (isWeisBetter(team1BestWeis, team2BestWeis)) {\r\n      // Team 1 wins, gets all their Weis points\r\n      team1Points = team1Players.reduce((sum, p) => sum + (p.weis?.reduce((s, w) => s + w.points, 0) || 0), 0);\r\n    } else if (isWeisBetter(team2BestWeis, team1BestWeis)) {\r\n      // Team 2 wins, gets all their Weis points\r\n      team2Points = team2Players.reduce((sum, p) => sum + (p.weis?.reduce((s, w) => s + w.points, 0) || 0), 0);\r\n    }\r\n    // If equal, nobody scores Weis points\r\n  } else if (team1BestWeis) {\r\n    team1Points = team1Players.reduce((sum, p) => sum + (p.weis?.reduce((s, w) => s + w.points, 0) || 0), 0);\r\n  } else if (team2BestWeis) {\r\n    team2Points = team2Players.reduce((sum, p) => sum + (p.weis?.reduce((s, w) => s + w.points, 0) || 0), 0);\r\n  }\r\n  \r\n  return { team1: team1Points, team2: team2Points, details };\r\n}\r\n\r\n// Compare two Weis to determine which is better\r\nexport function isWeisBetter(a: WeisDeclaration, b: WeisDeclaration): boolean {\r\n  // Higher points wins\r\n  if (a.points !== b.points) return a.points > b.points;\r\n  \r\n  // Same points - check by type priority and length\r\n  if (a.type.startsWith('sequence') && b.type.startsWith('sequence')) {\r\n    // Longer sequence wins\r\n    if (a.cards.length !== b.cards.length) return a.cards.length > b.cards.length;\r\n    // Same length - higher top card wins\r\n    const aTop = Math.max(...a.cards.map(c => rankToNumber(c.rank)));\r\n    const bTop = Math.max(...b.cards.map(c => rankToNumber(c.rank)));\r\n    return aTop > bTop;\r\n  }\r\n  \r\n  // For equal Weis, consider trump suit sequences higher\r\n  return false; // Equal\r\n}\r\n\r\nexport function resolveTrick(state: State): State {\r\n  const st = JSON.parse(JSON.stringify(state)) as State;\r\n  if (!st.pendingResolve) return st;\r\n  if (!st.currentTrick || st.currentTrick.length !== 4) { st.pendingResolve = false; return st; }\r\n  const lead = st.trickLead!;\r\n  const winnerIdx = winnerOfTrick(st.currentTrick as any, st.trump || undefined, lead);\r\n  const winnerCard = st.currentTrick[winnerIdx];\r\n  const winnerPlayer = winnerCard.playerId;\r\n  const wonCards = st.currentTrick.slice();\r\n  // store lastTrick for UI to display briefly\r\n  st.lastTrick = wonCards.slice();\r\n  st.players.find(p=>p.id===winnerPlayer)!.tricks.push(...wonCards.map(c => ({ id: c.id, suit: c.suit, rank: c.rank })) as any);\r\n  // compute trick points and add to winner team\r\n  let trickPoints = 0;\r\n  for (const c of wonCards) {\r\n    const isTrump = st.trump && c.suit === st.trump;\r\n    trickPoints += isTrump ? trumpOverride[c.rank] : basePoints[c.rank];\r\n  }\r\n  \r\n  // Add 5 points bonus for winning the last trick (when all hands are empty)\r\n  const isLastTrick = st.players.every(p => p.hand.length === 0);\r\n  if (isLastTrick) {\r\n    trickPoints += 5;\r\n  }\r\n  const winnerTeam = st.players.find(p=>p.id===winnerPlayer)!.team;\r\n  if (winnerTeam === 1) st.scores.team1 += trickPoints; else st.scores.team2 += trickPoints;\r\n  \r\n  // Weis points are tracked separately and applied elsewhere; do not add them here\r\n  \r\n  st.currentTrick = [];\r\n  st.trickLead = null;\r\n  st.currentPlayer = winnerPlayer;\r\n  st.pendingResolve = false;\r\n  \r\n  // if all hands empty, finish: perform final settlement (Weis, multiplier, match bonus) and distribute scores\r\n  if (st.players.every(p => p.hand.length === 0)) {\r\n    const settled = settleHand(st);\r\n    st.scores = settled.scores;\r\n    st.trumpMultiplier = settled.trumpMultiplier;\r\n    st.matchBonus = settled.matchBonus;\r\n    st.phase = 'finished';\r\n\r\n    // Distribute team scores to individual players for rankings\r\n    const team1Players = st.players.filter(p => p.team === 1);\r\n    const team2Players = st.players.filter(p => p.team === 2);\r\n    const team1Score = st.scores.team1;\r\n    const team2Score = st.scores.team2;\r\n    team1Players.forEach(p => p.points = team1Score);\r\n    team2Players.forEach(p => p.points = team2Score);\r\n  } else {\r\n    st.phase = 'playing';\r\n  }\r\n  return st;\r\n}\r\n\r\n// Apply Weis points, contract multiplier and match bonus in one settlement step\r\nexport function settleHand(state: State): State {\r\n  const st = JSON.parse(JSON.stringify(state)) as State;\r\n  const multiplier = st.trumpMultiplier || 1;\r\n\r\n  // Weis resolution (which team wins the Weis and their total Weis points)\r\n  const weisScore = calculateTeamWeis(st.players);\r\n\r\n  // Raw trick scores (should sum to 157 including last-trick bonus)\r\n  const rawTeam1 = st.scores.team1 || 0;\r\n  const rawTeam2 = st.scores.team2 || 0;\r\n\r\n  // Add Weis points to the raw totals\r\n  let t1 = rawTeam1 + (weisScore.team1 || 0);\r\n  let t2 = rawTeam2 + (weisScore.team2 || 0);\r\n\r\n  // Apply contract multiplier to the whole settled score\r\n  t1 = t1 * multiplier;\r\n  t2 = t2 * multiplier;\r\n\r\n  // Check for match-all (one team captured all tricks) and award match bonus (multiplied)\r\n  try {\r\n    const team1Cards = st.players.filter(p=>p.team===1).reduce((s,p)=>s + (p.tricks?.length||0), 0);\r\n    const team2Cards = st.players.filter(p=>p.team===2).reduce((s,p)=>s + (p.tricks?.length||0), 0);\r\n    const matchBonus = st.matchBonus || 100;\r\n    if (team1Cards === 36) {\r\n      t1 += (matchBonus * multiplier);\r\n    } else if (team2Cards === 36) {\r\n      t2 += (matchBonus * multiplier);\r\n    }\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n\r\n  st.scores.team1 = t1;\r\n  st.scores.team2 = t2;\r\n  return st;\r\n}\r\n\r\n// Enhanced bot choice: strategic Swiss Jass AI\r\nexport function chooseBotCard(state: State, botId: number): string | null {\r\n  const legal = getLegalCardsForPlayer(state, botId);\r\n  if (legal.length === 0) return null;\r\n  \r\n  const bot = state.players.find(p => p.id === botId)!;\r\n  const trumpSuit = state.trump;\r\n  const trick = state.currentTrick;\r\n  const isFirstCard = trick.length === 0;\r\n  const isLastCard = trick.length === 3;\r\n  const leadSuit = state.trickLead;\r\n  \r\n  // Strategy 1: If leading, play strong trump or high non-trump\r\n  if (isFirstCard) {\r\n    // Look for strong trump cards (U, O, K, A in trump)\r\n    const trumpCards = legal.filter(c => c.suit === trumpSuit);\r\n    if (trumpCards.length > 0) {\r\n      // Prefer to lead with non-wasting strong trump but avoid U unless safe\r\n      const strongTrump = trumpCards.filter(c => ['O', 'K', 'A'].includes(c.rank));\r\n      if (strongTrump.length > 0) {\r\n        return strongTrump[Math.floor(Math.random() * strongTrump.length)].id;\r\n      }\r\n      // If only U is strong and we have many trumps, consider holding it\r\n      if (trumpCards.some(c => c.rank === 'U') && trumpCards.length <= 2) {\r\n        return trumpCards.find(c=>c.rank==='U')!.id;\r\n      }\r\n    }\r\n    \r\n    // Otherwise play high non-trump\r\n    const nonTrump = legal.filter(c => c.suit !== trumpSuit);\r\n    if (nonTrump.length > 0) {\r\n      const highCards = nonTrump.filter(c => ['A', 'K', 'O'].includes(c.rank));\r\n      if (highCards.length > 0) {\r\n        return highCards[Math.floor(Math.random() * highCards.length)].id;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Strategy 2: If last to play, try to win or play low\r\n  if (isLastCard) {\r\n  const canWin = canBotWinTrick(legal, trick, trumpSuit, leadSuit);\r\n    if (canWin.length > 0) {\r\n      // Win with the winning card that spends the fewest points (lowest point value)\r\n      const best = canWin.slice().sort((x,y)=> {\r\n        const vx = (x.suit === trumpSuit ? trumpOverride[x.rank] : basePoints[x.rank]);\r\n        const vy = (y.suit === trumpSuit ? trumpOverride[y.rank] : basePoints[y.rank]);\r\n        if (vx !== vy) return vx - vy; // lower point cost preferred\r\n        return compareCardValue(x,y,trumpSuit,leadSuit);\r\n      })[0];\r\n      return best.id;\r\n    } else {\r\n      // Can't win, play lowest card\r\n      const lowest = legal.sort((a, b) => compareCardValue(a, b, trumpSuit, leadSuit))[0];\r\n      return lowest.id;\r\n    }\r\n  }\r\n  \r\n  // Strategy 3: Middle positions - cooperative play\r\n  const partner = state.players.find(p => p.team === bot.team && p.id !== bot.id);\r\n  const currentWinner = getCurrentTrickWinner(trick, trumpSuit, leadSuit);\r\n  const isPartnerWinning = partner && currentWinner?.playerId === partner.id;\r\n  \r\n  if (isPartnerWinning) {\r\n    // Partner is winning, play low to save good cards\r\n    // Prefer to avoid playing high trump if partner is winning\r\n    const nonTrump = legal.filter(c => c.suit !== trumpSuit);\r\n    if (nonTrump.length > 0) return nonTrump.sort((a,b)=>compareCardValue(a,b, trumpSuit, leadSuit))[0].id;\r\n    const lowest = legal.sort((a, b) => compareCardValue(a, b, trumpSuit, leadSuit))[0];\r\n    return lowest.id;\r\n  } else {\r\n    // Try to win the trick\r\n    const canWin = canBotWinTrick(legal, trick, trumpSuit, leadSuit);\r\n    if (canWin.length > 0) {\r\n      // avoid using U (Jack) to win unless necessary\r\n      const nonUBest = canWin.filter(c => c.rank !== 'U');\r\n      if (nonUBest.length > 0) return nonUBest.sort((a, b) => compareCardValue(a, b, trumpSuit, leadSuit))[0].id;\r\n      return canWin.sort((a, b) => compareCardValue(a, b, trumpSuit, leadSuit))[0].id;\r\n    }\r\n  }\r\n  \r\n  // Fallback: play a reasonable card\r\n  const pick = legal[Math.floor(Math.random() * legal.length)];\r\n  return pick.id;\r\n}\r\n\r\n// Helper: Check which cards can win the current trick\r\nfunction canBotWinTrick(legal: Card[], trick: (Card & { playerId: number })[], trumpContract: TrumpContract | 'schieben' | null | undefined, leadSuit: Suit | null | undefined): Card[] {\r\n  if (trick.length === 0) return legal; // First card always \"wins\" initially\r\n  \r\n  let currentBest = trick[0];\r\n  for (let i = 1; i < trick.length; i++) {\r\n    if (isCardBetter(trick[i], currentBest, trumpContract, leadSuit)) {\r\n      currentBest = trick[i];\r\n    }\r\n  }\r\n\r\n  return legal.filter(card => isCardBetter(card, currentBest, trumpContract, leadSuit));\r\n}\r\n\r\n// Helper: Get current trick winner\r\nfunction getCurrentTrickWinner(trick: (Card & { playerId: number })[], trumpContract: TrumpContract | 'schieben' | null | undefined, leadSuit: Suit | null | undefined): (Card & { playerId: number }) | null {\r\n  if (trick.length === 0) return null;\r\n  \r\n  let winner = trick[0];\r\n  for (let i = 1; i < trick.length; i++) {\r\n  if (isCardBetter(trick[i], winner, trumpContract, leadSuit)) {\r\n      winner = trick[i];\r\n    }\r\n  }\r\n  return winner;\r\n}\r\n\r\n// Helper: Compare card values for sorting (low to high)\r\nfunction compareCardValue(a: Card, b: Card, trumpContract: TrumpContract | 'schieben' | null | undefined, leadSuit: Suit | null | undefined): number {\r\n  const suitTrump: Suit | null = (trumpContract && (suits as any).includes(trumpContract)) ? trumpContract as Suit : null;\r\n  const aIsTrump = suitTrump ? a.suit === suitTrump : false;\r\n  const bIsTrump = suitTrump ? b.suit === suitTrump : false;\r\n  \r\n  if (aIsTrump && !bIsTrump) return 1; // Trump is higher\r\n  if (!aIsTrump && bIsTrump) return -1;\r\n  \r\n  if (aIsTrump && bIsTrump) {\r\n    // Use correct Swiss Jass trump order: U (Jack) highest, then 9, A, 10, K, O, 8, 7, 6 lowest\r\n    const trumpOrder = ['6', '7', '8', 'O', 'K', '10', 'A', '9', 'U'];\r\n    return trumpOrder.indexOf(a.rank) - trumpOrder.indexOf(b.rank);\r\n  }\r\n  \r\n  const normalOrder = ['6', '7', '8', '9', '10', 'U', 'O', 'K', 'A'];\r\n  return normalOrder.indexOf(a.rank) - normalOrder.indexOf(b.rank);\r\n}\r\n\r\n// Helper: Check if card A beats card B in the current context\r\nfunction isCardBetter(a: Card, b: Card, trumpContract: TrumpContract | 'schieben' | null | undefined, leadSuit: Suit | null | undefined): boolean {\r\n  const suitTrump: Suit | null = (trumpContract && (suits as any).includes(trumpContract)) ? trumpContract as Suit : null;\r\n  const aIsTrump = suitTrump ? a.suit === suitTrump : false;\r\n  const bIsTrump = suitTrump ? b.suit === suitTrump : false;\r\n  \r\n  // Trump always beats non-trump\r\n  if (aIsTrump && !bIsTrump) return true;\r\n  if (!aIsTrump && bIsTrump) return false;\r\n  \r\n  // Both trump: compare trump values using correct Swiss Jass hierarchy\r\n  if (aIsTrump && bIsTrump) {\r\n    // In Swiss Jass trump: U (Jack) = highest, then 9, A, 10, K, O, 8, 7, 6 = lowest\r\n    const trumpOrder = ['6', '7', '8', 'O', 'K', '10', 'A', '9', 'U'];\r\n    return trumpOrder.indexOf(a.rank) > trumpOrder.indexOf(b.rank);\r\n  }\r\n  \r\n  // Both non-trump: must follow suit if possible\r\n  const aFollows = a.suit === leadSuit;\r\n  const bFollows = b.suit === leadSuit;\r\n  \r\n  if (aFollows && !bFollows) return true;\r\n  if (!aFollows && bFollows) return false;\r\n  \r\n  // Both follow suit or both don't: compare normal values\r\n  const normalOrder = ['6', '7', '8', '9', '10', 'U', 'O', 'K', 'A'];\r\n  return normalOrder.indexOf(a.rank) > normalOrder.indexOf(b.rank);\r\n}\r\n", "import * as Schieber from '../src/engine/schieber';\r\n\r\nfunction sumScores(st: Schieber.State) {\r\n  return (st.scores.team1 || 0) + (st.scores.team2 || 0);\r\n}\r\n\r\nfunction runOneHand() {\r\n  let st = Schieber.startGameLocal();\r\n  // let bots pick trump until playing (simulate naive decisions)\r\n  while (st.phase === 'trump_selection') {\r\n    const p = st.currentPlayer;\r\n    if (p === 0) {\r\n      // pick a random trump for player 0 (simulate human choosing randomly)\r\n      const t = Schieber.chooseRandomTrump();\r\n      st = Schieber.setTrumpAndDetectWeis(st, t as any);\r\n    } else {\r\n      const t = Schieber.chooseBotTrump(st, p);\r\n      st = Schieber.setTrumpAndDetectWeis(st, t as any);\r\n    }\r\n  }\r\n\r\n  // play until finished using simple bot choices\r\n  while (st.phase !== 'finished') {\r\n    if (st.currentPlayer !== 0) {\r\n      const pick = Schieber.chooseBotCard(st, st.currentPlayer);\r\n      if (!pick) break;\r\n      st = Schieber.playCardLocal(st, st.currentPlayer, pick);\r\n      if (st.pendingResolve) {\r\n        st = Schieber.resolveTrick(st);\r\n      }\r\n    } else {\r\n      // play first legal card for player 0\r\n      const legal = Schieber.getLegalCardsForPlayer(st, 0);\r\n      if (legal.length === 0) break;\r\n      st = Schieber.playCardLocal(st, 0, legal[0].id);\r\n      if (st.pendingResolve) st = Schieber.resolveTrick(st);\r\n    }\r\n  }\r\n\r\n  return st;\r\n}\r\n\r\nfunction simulate(n = 20) {\r\n  for (let i = 0; i < n; i++) {\r\n    const st = runOneHand();\r\n  const total = sumScores(st);\r\n  // compute sum of card points from collected tricks for verification\r\n    const basePoints: Record<string, number> = { '6':0,'7':0,'8':0,'9':0,'10':10,'U':2,'O':3,'K':4,'A':11 };\r\n    const trumpOverride: Record<string, number> = { 'U':20,'9':14,'A':11,'10':10,'K':4,'O':3,'8':0,'7':0,'6':0 };\r\n    let sumFromTricks = 0;\r\n    let totalCards = 0;\r\n    for (const p of st.players) {\r\n      for (const c of p.tricks) {\r\n        totalCards += 1;\r\n        const isTrump = (st.trump && (['eicheln','schellen','rosen','schilten'].includes(st.trump))) ? c.suit === st.trump : false;\r\n        sumFromTricks += isTrump ? trumpOverride[c.rank] : basePoints[c.rank];\r\n      }\r\n    }\r\n    const diff = total - sumFromTricks;\r\n    // Compute per-team raw totals from collected trick cards\r\n    const teamRaw: { [k:number]: number } = { 1: 0, 2: 0 };\r\n    for (const p of st.players) {\r\n      for (const c of p.tricks) {\r\n        const isTrump = (st.trump && (['eicheln','schellen','rosen','schilten'].includes(st.trump))) ? c.suit === st.trump : false;\r\n        const pts = isTrump ? trumpOverride[c.rank] : basePoints[c.rank];\r\n        teamRaw[p.team] += pts;\r\n      }\r\n    }\r\n    // Add last-trick +5 to the team of the currentPlayer (winner of last trick)\r\n    if (st.players.every(p => p.hand.length === 0)) {\r\n      const winnerTeam = st.players.find(p => p.id === st.currentPlayer)!.team;\r\n      teamRaw[winnerTeam] += 5;\r\n    }\r\n\r\n    // The engine already applies settlement in resolveTrick when finishing, so read settled scores from st.scores\r\n    const settled = { team1: st.scores.team1 || 0, team2: st.scores.team2 || 0 };\r\n    console.log(`Hand ${i+1}: RawTeam1=${teamRaw[1]} RawTeam2=${teamRaw[2]} RawTotal=${teamRaw[1]+teamRaw[2]} Trump=${st.trump} Mult=${st.trumpMultiplier}`);\r\n    console.log(`  Settled: Team1=${settled.team1} Team2=${settled.team2} Total=${settled.team1+settled.team2}`);\r\n    console.log(`  Cards counted=${totalCards}, sumFromTricks=${sumFromTricks}, settled-minus-cards=${(settled.team1+settled.team2)-sumFromTricks}`);\r\n    if (total !== 157) {\r\n      console.warn('Total points mismatch (expected 157)');\r\n    }\r\n  }\r\n}\r\n\r\nsimulate(10);\r\n"],
  "mappings": "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",
  "names": ["trumpOrder", "normalOrder", "basePoints", "trumpOverride"]
}
