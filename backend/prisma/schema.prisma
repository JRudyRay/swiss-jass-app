generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./swiss_jass.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatarShape String @default("circle")
  avatarColor String @default("#3B82F6")
  country   String @default("CH")
  city      String?
  totalGames    Int @default(0)
  totalWins     Int @default(0)
  totalPoints   Int @default(0)
  trueSkillMu    Float @default(25.0)
  trueSkillSigma Float @default(8.333)
  isBot     Boolean  @default(false)  // NEW: Flag for bot players to exclude from rankings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  tablesCreated   GameTable[]       @relation("TableCreator")
  tablePlayers    GameTablePlayer[]
  friendshipsA    Friendship[]      @relation("FriendshipA")
  friendshipsB    Friendship[]      @relation("FriendshipB")
  friendRequestsSent    FriendRequest[] @relation("RequestSender")
  friendRequestsReceived FriendRequest[] @relation("RequestReceiver")
  @@map("users")
}

model GameSession {
  id            String   @id @default(cuid())
  userId        String
  gameType      String
  result        String
  points        Int
  duration      Int
  isMultiplayer Boolean  @default(false)  // NEW: Track if game was multiplayer (rankings only count these)
  createdAt     DateTime @default(now())
  @@map("game_sessions")
}

model GameTable {
  id          String            @id @default(cuid())
  code        String            @unique
  name        String
  status      TableStatus       @default(OPEN)
  maxPlayers  Int               @default(4)
  gameType    String            @default("schieber")
  gameMode    GameMode          @default(MULTIPLAYER)  // NEW: Discriminator for offline vs multiplayer
  team1Name   String            @default("Team 1")
  team2Name   String            @default("Team 2")
  targetPoints Int              @default(1000)
  createdById String
  createdBy   User              @relation("TableCreator", fields: [createdById], references: [id])
  players     GameTablePlayer[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  startedAt   DateTime?
  endedAt     DateTime?
  isPrivate   Boolean           @default(false)
  password    String?
}

model GameTablePlayer {
  id        String    @id @default(cuid())
  tableId   String
  userId    String
  seatIndex Int?
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  isHost    Boolean   @default(false)
  isReady   Boolean   @default(false)
  table     GameTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([tableId, userId])
  @@index([userId])
  @@index([tableId])
}

model Friendship {
  id        String   @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())
  userA     User     @relation("FriendshipA", fields: [userAId], references: [id], onDelete: Cascade)
  userB     User     @relation("FriendshipB", fields: [userBId], references: [id], onDelete: Cascade)
  @@unique([userAId, userBId])
  @@index([userBId])
}

model FriendRequest {
  id          String            @id @default(cuid())
  senderId    String
  receiverId  String
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  respondedAt DateTime?
  sender      User              @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User              @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  @@unique([senderId, receiverId])
  @@index([receiverId])
}

enum TableStatus {
  OPEN
  STARTING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum GameMode {
  OFFLINE       // Local/practice games (no stats)
  MULTIPLAYER   // Real multiplayer (stats count)
}
