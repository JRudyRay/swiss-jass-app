name: Deploy backend to Raspberry Pi

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend-pi.yml'
      - 'deploy/raspberry-pi/**'
  workflow_dispatch:
  workflow_call:
    secrets:
      PI_HOST:
        required: true
      PI_SSH_USER:
        required: true
      PI_SSH_KEY:
        required: true
      PI_SSH_PORT:
        required: false
    inputs:
      PI_APP_DIR:
        required: true
        type: string
      PI_BRANCH:
        required: false
        type: string

jobs:
  deploy:
    name: SSH deploy to Raspberry Pi
    runs-on: ubuntu-latest
    env:
      DEPLOY_PI_HOST: ${{ secrets.PI_HOST }}
      DEPLOY_PI_USER: ${{ secrets.PI_SSH_USER }}
      DEPLOY_PI_KEY: ${{ secrets.PI_SSH_KEY }}
      DEPLOY_PI_PORT: ${{ secrets.PI_SSH_PORT }}
      DEPLOY_PI_APP_DIR: /home/pi/apps/swiss-jass-app
      DEPLOY_PI_BRANCH: main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run deployment script on Raspberry Pi
        uses: appleboy/ssh-action@v1.0.0
        env:
          PI_APP_DIR: ${{ env.DEPLOY_PI_APP_DIR }}
          PI_BRANCH: ${{ env.DEPLOY_PI_BRANCH }}
        with:
          host: ${{ env.DEPLOY_PI_HOST }}
          username: ${{ env.DEPLOY_PI_USER }}
          key: ${{ env.DEPLOY_PI_KEY }}
          port: ${{ env.DEPLOY_PI_PORT || '22' }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            APP_DIR="${PI_APP_DIR:-}"
            BRANCH="${PI_BRANCH:-main}"
            if [ -z "$APP_DIR" ]; then
              echo "PI_APP_DIR secret is required" >&2
              exit 1
            fi
            mkdir -p "$APP_DIR"
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "Cloning repository"
              git clone https://github.com/${{ github.repository }} "$APP_DIR"
            fi
            cd "$APP_DIR"
            git fetch origin "$BRANCH"
            git checkout "$BRANCH"
            git reset --hard "origin/$BRANCH"
            git clean -fd
            cd backend
            export NODE_ENV=production
            npm ci
            npm run build
            if command -v pm2 >/dev/null 2>&1; then
              pm2 describe swiss-jass-backend >/dev/null 2>&1 && pm2 restart swiss-jass-backend --update-env || pm2 start dist/index.js --name swiss-jass-backend --update-env
            else
              systemctl --user restart swiss-jass-backend.service 2>/dev/null || sudo systemctl restart swiss-jass-backend.service
            fi
